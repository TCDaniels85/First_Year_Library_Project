#BlueJ class context
comment0.params=
comment0.target=Library()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Library\r\n
comment1.params=libraryItem
comment1.target=void\ storeItem(LibraryItem)
comment1.text=\r\n\ Adds\ LibraryItem\ \ object\ to\ the\ appropriate\ HashMap\r\n
comment10.params=
comment10.target=java.lang.String\ generateReservationNo()
comment10.text=\r\n\ Generates\ a\ reservation\ number\ sequentially,\ determines\ the\ size\ of\ the\ map\ to\ get\ the\ current\ number\ of\ reservations,\ adds\ one\ to\ this\ number\ for\ the\ next\ \r\n\ reservation\ number\ and\ pads\ the\ rest\ out\ with\ zeros\ to\ return\ a\ 6\ digit\ number\ as\ a\ string.\r\n
comment11.params=
comment11.target=int\ getNoOfReservations()
comment11.text=\r\n\ Returns\ the\ number\ of\ records\ in\ itemReservationMap\r\n
comment12.params=reservationNo
comment12.target=ItemReservation\ getItemReservation(java.lang.String)
comment12.text=\r\n\ Returns\ an\ item\ reservation\ object\ from\ hashmap\ using\ the\ key\r\n
comment13.params=itemCode\ userID\ startDate\ noOfDays
comment13.target=boolean\ makeItemReservation(java.lang.String,\ java.lang.String,\ java.lang.String,\ int)
comment13.text=\r\n\ Creates\ an\ item\ reservation\ and\ adds\ it\ to\ the\ list\ of\ reservations\r\n\ Checks\ each\ of\ the\ fields\ to\ ensure\ all\ data\ entered\ is\ valid.\ \r\n\ If\ any\ fields\ are\ not\ valid,\ a\ message\ is\ output\ to\ display\ which\ fields\ are\ not\ valid\ and\ informs\ the\ user\ a\ reservation\ has\ not\ been\ created.\r\n
comment14.params=
comment14.target=void\ printItemReservations()
comment14.text=\r\n\ Prints\ out\ a\ list\ of\ the\ current\ reservations\ to\ the\ terminal.\r\n
comment15.params=
comment15.target=void\ writeItemReservationData()
comment15.text=\r\n\ Writes\ the\ item\ reservation\ data\ to\ a\ text\ file\ as\ comma\ seperated\ data,\ with\ a\ flag\ set\ between\ [\ ]\ to\ indicate\ data\ type.\r\n
comment16.params=
comment16.target=void\ readItemReservationData()
comment16.text=\r\n\ Reads\ item\ reservations\ from\ a\ text\ file,\ validate\ the\ data\ is\ of\ the\ correct\ type\ using\ a\ flag\r\n
comment17.params=startDateString\ endDateString
comment17.target=void\ printDiaryEntries(java.lang.String,\ java.lang.String)
comment17.text=\r\n\ Prints\ out\ a\ list\ of\ reservations\ for\ each\ day\ between\ two\ dates\ supplied\ by\ the\ user\ as\ parameters.\r\n
comment18.params=itemCode\ startDate\ noOfDays
comment18.target=boolean\ checkItemReservation(java.lang.String,\ java.lang.String,\ int)
comment18.text=\r\n\ This\ method\ takes\ itemCode,\ startDate\ and\ noOfDays\ as\ parameters,\ passed\ from\ the\ make\ item\ reservation\ method.\r\n\ Sends\ the\ date\ to\ the\ diary's\ getReservations()\ method,\ each\ reservation\ on\ that\ date\ (if\ there\ are\ any)\ has\ it's\ itemCode\ field\ compared\ to\ the\ reservation\ being\ made\ itemCode\r\n\ If\ that\ item\ is\ reserverved\ on\ that\ day,\ the\ reservationNo\ of\ that\ object\ is\ saved\ in\ a\ hashSet(so\ it\ does\ not\ get\ duplicated\ for\ each\ day,\ important\ \r\n\ for\ when\ they\ are\ printed\ in\ the\ makeReservation()\ method).\r\n\ \r\n\ returns\ true\ if\ the\ hashSet\ is\ empty\ meaning\ the\ item\ has\ not\ been\ reserved\ at\ any\ other\ time.\r\n
comment19.params=reservationNo
comment19.target=void\ deleteItemReservation(java.lang.String)
comment19.text=\r\n\ Deletes\ the\ reservation,\ takes\ a\ reservationNo\ parameter.\r\n\ Checks\ if\ the\ reservation\ number\ is\ the\ correct\ 6\ digit\ length\ and\ informs\ the\ user\ if\ the\ reservation\ number\ doesn't\ exist.\r\n
comment2.params=libraryUser
comment2.target=void\ storeUser(LibraryUser)
comment2.text=\r\n\ Adds\ a\ LibraryUser\ object\ to\ the\ Arraylist,\ makes\ a\ call\ to\ the\ setUserID()\ method\ to\ give\ the\ user\ an\ ID\ if\ the\ user\ does\ not\ have\ one.\r\n\ Uses\ a\ while\ loop\ to\ check\ that\ the\ userID\ is\ unique\ before\ adding\ to\ the\ userMap\r\n
comment3.params=initialSize
comment3.target=boolean\ checkUserIDIsUnique(int)
comment3.text=\r\n\ Checks\ whether\ a\ generated\ ID\ is\ unique.\ Compares\ the\ size\ of\ the\ HashSet\ before\ and\ after\ the\ userID\ has\ been\ added\ to\ it.\r\n\ As\ a\ HashSet\ does\ not\ allow\ duplicate\ values,\ if\ the\ size\ before\ and\ after\ are\ the\ same,\ then\ the\ generated\ ID\ already\ exists.\r\n\r\n\ Takes\ an\ int\ initialSize\ as\ a\ parameter\ from\ the\ store\ method,\ this\ is\ the\ size\ of\ the\ HashSet\ before\ the\ userID\ is\ added.\r\n\ Returns\ a\ boolean\r\n
comment4.params=keyValue\ recordType
comment4.target=void\ printSingleRecord(java.lang.String,\ java.lang.String)
comment4.text=\r\n\ Prints\ details\ for\ a\ single\ item\ in\ array\ list,\ user\ enters\ record\ number\ required\ and\ the\ type\ of\ record\r\n\ Type\ "user"\ to\ read\ from\ user\ database,\ type\ "library"\ to\ read\ from\ library\ database\r\n\ NEEDS\ CHANGING\ FOR\ HASHMAP\r\n
comment5.params=
comment5.target=void\ displayDetails()
comment5.text=\r\n\ Prints\ all\ library\ items\ and\ library\ users\ in\ stored\ in\ the\ hashMaps.\r\n
comment6.params=
comment6.target=void\ readData()
comment6.text=\r\n\ Reads\ item\ selected\ from\ file\ dialogue,\ Sets\ directory\ for\ dialogue\ box\ to\ parent\ directory\ of\ project.\r\n\ Recognises\ flags\ in\ []\ so\ data\ can\ be\ added\ to\ the\ correct\ list.\r\n
comment7.params=
comment7.target=void\ writeUserData()
comment7.text=\r\n\ Writes\ user\ data\ to\ a\ text\ file\ as\ comma\ seperated\ data,\ with\ a\ flag\ set\ between\ [\ ]\ to\ indicate\ data\ type.\r\n
comment8.params=userID
comment8.target=void\ addUserIDCheck(java.lang.String)
comment8.text=\r\n\ Method\ to\ add\ userID\ to\ a\ HashSet\r\n\ \r\n
comment9.params=itemReservation
comment9.target=void\ storeItemReservation(ItemReservation)
comment9.text=\r\n\ Adds\ itemReservation\ object\ to\ the\ hashMap\r\n
numComments=20
